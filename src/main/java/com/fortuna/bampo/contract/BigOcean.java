package com.fortuna.bampo.contract;

import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 *
 * @author C__V
 */
@SuppressWarnings("rawtypes")
public class BigOcean extends Contract {
    public static final String FUNC_GETACTIVITYNUM = "getActivityNum";

    public static final String FUNC_CANCELACTIVIY = "cancelActiviy";

    public static final String FUNC_GETUSERIDPAGE = "getUserIdPage";

    public static final String FUNC_FINEUSER = "fineUser";
    public static final String FUNC_GETACTIVITYTRANSACTIONPAGE = "getActivityTransactionPage";
    public static final String FUNC_GETACTIVITYPARTICIPANTNUM = "getActivityParticipantNum";
    public static final String FUNC_GETACTIVITYPARTICIPANTPAGE = "getActivityParticipantPage";

    public static final String FUNC_GETACTIVITYIDPAGE = "getActivityIdPage";

    public static final String FUNC_ACTIVITYTEST = "activityTest";

    public static final String FUNC_GETUSER = "getUser";
    public static final String FUNC_GETUSERTRANSACTIONPAGE = "getUserTransactionPage";

    public static final String FUNC_GETUSERBALANCE = "getUserBalance";

    public static final String FUNC_USERTOUSERTRANSFER = "usertouserTransfer";

    public static final String FUNC_USERTEST = "userTest";

    public static final String FUNC_CREATEUSER = "createUser";

    public static final String FUNC_ACTIVITYIDLIST = "activityIdList";

    public static final String FUNC_PAYUSER = "payUser";

    public static final String FUNC_GETACTIVITY = "getActivity";

    public static final String FUNC_GETUSERIDLIST = "getUserIdList";

    public static final String FUNC_USERIDLIST = "userIdList";

    public static final String FUNC_DESTORY = "destory";

    public static final String FUNC_UPDATEACTIVITY = "updateActivity";

    public static final String FUNC_CREATEACTIVIY = "createActiviy";

    public static final String FUNC_GETACTIVITYIDLIST = "getActivityIdList";

    public static final String FUNC_USERPAYACTIVITY = "userPayActivity";

    public static final String FUNC_GETTRANSACTION = "getTransaction";
    public static final String FUNC_GETACTIVITYPAYOFFPAGE = "getActivityPayoffPage";

    public static final String FUNC_GETUSERNUM = "getUserNum";

    public static final String FUNC_DELETEUSER = "deleteUser";

    public static final String FUNC_ACTIVITYPAYUSER = "activityPayUser";

    public static final String FUNC_TRANSACTIONTEST = "transactionTest";
    public static final String FUNC_GETUSERACTIVITYPAGE = "getUserActivityPage";
    private static final String BINARY =
            "";

    public static final String FUNC_FINISHACTIVIY = "finishActiviy";

    @Deprecated
    protected BigOcean(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
                       BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected BigOcean(String contractAddress, Web3j web3j, Credentials credentials,
                       ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected BigOcean(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                       BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected BigOcean(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                       ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    @Deprecated
    public static BigOcean load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
                                BigInteger gasLimit) {
        return new BigOcean(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static BigOcean load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new BigOcean(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static BigOcean load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new BigOcean(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static BigOcean load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new BigOcean(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<BigOcean> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(BigOcean.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<BigOcean> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(BigOcean.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<BigOcean> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BigOcean.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<BigOcean> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BigOcean.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public RemoteFunctionCall<TransactionReceipt> cancelActiviy(String aid, String tid) {
        final Function function = new Function(
                FUNC_CANCELACTIVIY,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(aid),
                        new org.web3j.abi.datatypes.Utf8String(tid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getUserIdPage(BigInteger pageNum, BigInteger pageLength) {
        final Function function = new Function(FUNC_GETUSERIDPAGE,
                Arrays.asList(new org.web3j.abi.datatypes.generated.Uint256(pageNum),
                        new org.web3j.abi.datatypes.generated.Uint256(pageLength)),
                Arrays.asList(new TypeReference<DynamicArray<Utf8String>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> fineUser(String uid, BigInteger value, String tid) {
        final Function function = new Function(
                FUNC_FINEUSER,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(uid),
                        new org.web3j.abi.datatypes.generated.Uint256(value),
                        new org.web3j.abi.datatypes.Utf8String(tid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getActivityNum() {
        final Function function = new Function(FUNC_GETACTIVITYNUM,
                Arrays.asList(),
                Arrays.asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getActivityTransactionPage(String aid, BigInteger pageNum, BigInteger pageLength) {
        final Function function = new Function(FUNC_GETACTIVITYTRANSACTIONPAGE,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(aid),
                        new org.web3j.abi.datatypes.generated.Uint256(pageNum),
                        new org.web3j.abi.datatypes.generated.Uint256(pageLength)),
                Arrays.asList(new TypeReference<DynamicArray<Utf8String>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getActivityParticipantNum(String aid) {
        final Function function = new Function(FUNC_GETACTIVITYPARTICIPANTNUM,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(aid)),
                Arrays.asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getActivityIdPage(BigInteger pageNum, BigInteger pageLength) {
        final Function function = new Function(FUNC_GETACTIVITYIDPAGE,
                Arrays.asList(new org.web3j.abi.datatypes.generated.Uint256(pageNum),
                        new org.web3j.abi.datatypes.generated.Uint256(pageLength)),
                Arrays.asList(new TypeReference<DynamicArray<Utf8String>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> activityTest(String aid) {
        final Function function = new Function(FUNC_ACTIVITYTEST,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(aid)),
                Arrays.asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, List<String>, List<String>, Boolean>> getUser(String uid) {
        final Function function = new Function(FUNC_GETUSER,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(uid)),
                Arrays.asList(new TypeReference<Uint256>() {
                }, new TypeReference<DynamicArray<Utf8String>>() {
                }, new TypeReference<DynamicArray<Utf8String>>() {
                }, new TypeReference<Bool>() {
                }));
        return new RemoteFunctionCall<Tuple4<BigInteger, List<String>, List<String>, Boolean>>(function,
                new Callable<Tuple4<BigInteger, List<String>, List<String>, Boolean>>() {
                    @Override
                    public Tuple4<BigInteger, List<String>, List<String>, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, List<String>, List<String>, Boolean>(
                                (BigInteger) results.get(0).getValue(),
                                convertToNative((List<Utf8String>) results.get(1).getValue()),
                                convertToNative((List<Utf8String>) results.get(2).getValue()),
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getActivityParticipantPage(String aid, BigInteger pageNum, BigInteger pageLength) {
        final Function function = new Function(FUNC_GETACTIVITYPARTICIPANTPAGE,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(aid),
                        new org.web3j.abi.datatypes.generated.Uint256(pageNum),
                        new org.web3j.abi.datatypes.generated.Uint256(pageLength)),
                Arrays.asList(new TypeReference<DynamicArray<Utf8String>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getUserBalance(String uid) {
        final Function function = new Function(FUNC_GETUSERBALANCE,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(uid)),
                Arrays.asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> usertouserTransfer(String from, String to, BigInteger value,
                                                                     String tid) {
        final Function function = new Function(
                FUNC_USERTOUSERTRANSFER,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(from),
                        new org.web3j.abi.datatypes.Utf8String(to),
                        new org.web3j.abi.datatypes.generated.Uint256(value),
                        new org.web3j.abi.datatypes.Utf8String(tid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> userTest(String uid) {
        final Function function = new Function(FUNC_USERTEST,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(uid)),
                Arrays.asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createUser(String uid) {
        final Function function = new Function(
                FUNC_CREATEUSER,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(uid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> activityIdList(BigInteger param0) {
        final Function function = new Function(FUNC_ACTIVITYIDLIST,
                Arrays.asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> payUser(String uid, BigInteger value, String tid) {
        final Function function = new Function(
                FUNC_PAYUSER,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(uid),
                        new org.web3j.abi.datatypes.generated.Uint256(value),
                        new org.web3j.abi.datatypes.Utf8String(tid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<String, BigInteger, List<String>, List<BigInteger>, List<String>, Boolean,
            Boolean>> getActivity(String aid) {
        final Function function = new Function(FUNC_GETACTIVITY,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(aid)),
                Arrays.asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<DynamicArray<Utf8String>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }, new TypeReference<DynamicArray<Utf8String>>() {
                }, new TypeReference<Bool>() {
                }, new TypeReference<Bool>() {
                }));
        return new RemoteFunctionCall<Tuple7<String, BigInteger, List<String>, List<BigInteger>, List<String>,
                Boolean, Boolean>>(function,
                new Callable<Tuple7<String, BigInteger, List<String>, List<BigInteger>, List<String>, Boolean,
                        Boolean>>() {
                    @Override
                    public Tuple7<String, BigInteger, List<String>, List<BigInteger>, List<String>, Boolean, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, BigInteger, List<String>, List<BigInteger>, List<String>, Boolean,
                                Boolean>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                convertToNative((List<Utf8String>) results.get(2).getValue()),
                                convertToNative((List<Uint256>) results.get(3).getValue()),
                                convertToNative((List<Utf8String>) results.get(4).getValue()),
                                (Boolean) results.get(5).getValue(),
                                (Boolean) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getUserIdList() {
        final Function function = new Function(FUNC_GETUSERIDLIST,
                Arrays.asList(),
                Arrays.asList(new TypeReference<DynamicArray<Utf8String>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> userIdList(BigInteger param0) {
        final Function function = new Function(FUNC_USERIDLIST,
                Arrays.asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> destory() {
        final Function function = new Function(
                FUNC_DESTORY,
                Arrays.asList(),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateActivity(String aid, BigInteger num,
                                                                 List<String> participantList,
                                                                 List<BigInteger> payoffList, String refundTid,
                                                                 String fundTid) {
        final Function function = new Function(
                FUNC_UPDATEACTIVITY,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(aid),
                        new org.web3j.abi.datatypes.generated.Uint256(num),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                                org.web3j.abi.datatypes.Utf8String.class,
                                org.web3j.abi.Utils.typeMap(participantList, org.web3j.abi.datatypes.Utf8String.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(payoffList,
                                        org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.Utf8String(refundTid),
                        new org.web3j.abi.datatypes.Utf8String(fundTid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createActiviy(String aid, String funder, BigInteger num, List<String> participantList, List<BigInteger> payoffList, String tid) {
        final Function function = new Function(
                FUNC_CREATEACTIVIY,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(aid),
                        new org.web3j.abi.datatypes.Utf8String(funder),
                        new org.web3j.abi.datatypes.generated.Uint256(num),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                                org.web3j.abi.datatypes.Utf8String.class,
                                org.web3j.abi.Utils.typeMap(participantList, org.web3j.abi.datatypes.Utf8String.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(payoffList,
                                        org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.Utf8String(tid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getActivityIdList() {
        final Function function = new Function(FUNC_GETACTIVITYIDLIST,
                Arrays.asList(),
                Arrays.asList(new TypeReference<DynamicArray<Utf8String>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> userPayActivity(String uid, String aid, BigInteger value, String tid) {
        final Function function = new Function(
                FUNC_USERPAYACTIVITY,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(uid),
                        new org.web3j.abi.datatypes.Utf8String(aid),
                        new org.web3j.abi.datatypes.generated.Uint256(value),
                        new org.web3j.abi.datatypes.Utf8String(tid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<String, String, BigInteger, String, Boolean>> getTransaction(String tid) {
        final Function function = new Function(FUNC_GETTRANSACTION,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(tid)),
                Arrays.asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Bool>() {
                }));
        return new RemoteFunctionCall<Tuple5<String, String, BigInteger, String, Boolean>>(function,
                new Callable<Tuple5<String, String, BigInteger, String, Boolean>>() {
                    @Override
                    public Tuple5<String, String, BigInteger, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, BigInteger, String, Boolean>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getUserTransactionPage(String uid, BigInteger pageNum, BigInteger pageLength) {
        final Function function = new Function(FUNC_GETUSERTRANSACTIONPAGE,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(uid),
                        new org.web3j.abi.datatypes.generated.Uint256(pageNum),
                        new org.web3j.abi.datatypes.generated.Uint256(pageLength)),
                Arrays.asList(new TypeReference<DynamicArray<Utf8String>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getUserNum() {
        final Function function = new Function(FUNC_GETUSERNUM,
                Arrays.asList(),
                Arrays.asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteUser(String id) {
        final Function function = new Function(
                FUNC_DELETEUSER,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(id)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> activityPayUser(String aid, String uid, BigInteger value,
                                                                  String tid) {
        final Function function = new Function(
                FUNC_ACTIVITYPAYUSER,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(aid),
                        new org.web3j.abi.datatypes.Utf8String(uid),
                        new org.web3j.abi.datatypes.generated.Uint256(value),
                        new org.web3j.abi.datatypes.Utf8String(tid)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> transactionTest(String tid) {
        final Function function = new Function(FUNC_TRANSACTIONTEST,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(tid)),
                Arrays.asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<List> getActivityPayoffPage(String aid, BigInteger pageNum, BigInteger pageLength) {
        final Function function = new Function(FUNC_GETACTIVITYPAYOFFPAGE,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(aid),
                        new org.web3j.abi.datatypes.generated.Uint256(pageNum),
                        new org.web3j.abi.datatypes.generated.Uint256(pageLength)),
                Arrays.asList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getUserActivityPage(String uid, BigInteger pageNum, BigInteger pageLength) {
        final Function function = new Function(FUNC_GETUSERACTIVITYPAGE,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(uid),
                        new org.web3j.abi.datatypes.generated.Uint256(pageNum),
                        new org.web3j.abi.datatypes.generated.Uint256(pageLength)),
                Arrays.asList(new TypeReference<DynamicArray<Utf8String>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> finishActiviy(String aid, List<String> tidList) {
        final Function function = new Function(
                FUNC_FINISHACTIVIY,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(aid),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                                org.web3j.abi.datatypes.Utf8String.class,
                                org.web3j.abi.Utils.typeMap(tidList, org.web3j.abi.datatypes.Utf8String.class))),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }
}
